configurations {
    functionalTest
}

sourceSets {
    functionalTest {
        java.srcDir file('src/functionalTest/java')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.testRuntime + configurations.functionalTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functionalTestRuntime
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath

    reports.html.destination = "$reportsDir/functionalTest"

    jacoco {
        enabled = true
        append = false
        destinationFile = file("$buildDir/jacoco/functionalTest.exec")
        classDumpFile = file("$buildDir/jacoco/functionalTestClassDumpFile")
    }

    dependsOn deploy
    finalizedBy undeploy
    shouldRunAfter test
}
check.dependsOn functionalTest

task jacocoFunctionalTestReport(type:JacocoReport) {
    executionData functionalTest
    sourceSets sourceSets.main

    dependsOn functionalTest
    mustRunAfter undeploy
}
functionalTest.finalizedBy jacocoFunctionalTestReport

task jacocoMerge(type: JacocoMerge) {
    executionData test, functionalTest
    destinationFile = file("$buildDir/jacoco/merged.exec")

    dependsOn jacocoTestReport, jacocoFunctionalTestReport
}

task mergedReport(type: JacocoReport) {
    executionData jacocoMerge.destinationFile
    sourceDirectories = files(sourceSets.main.java.srcDirs)
    classDirectories = files(sourceSets.main.output.classesDir)

    dependsOn jacocoMerge
}
check.dependsOn mergedReport
